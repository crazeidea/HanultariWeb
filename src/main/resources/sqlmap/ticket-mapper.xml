<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="ticket.mapper">

<insert id="reply_insert">
	<![CDATA[
	{
	call declare begin
	
	update ticket set step = step + 1 
	where root = #{root} and step > #{step};  
	
	insert into ticket (id, root, title, content, writer
					, filename, filepath, step, indent )
	values ( seq_ticket.nextval, #{root}, #{title}, #{content}, #{writer}
					, #{filename, jdbcType=VARCHAR}
					, #{filepath, jdbcType=VARCHAR}, #{step}+1, #{indent}+1 );
					
	end
	}
	]]>
</insert>


<update id="update">
	update ticket set title = #{title}, content = #{content}
					, filename = #{filename, jdbcType=VARCHAR}
					, filepath = #{filepath, jdbcType=VARCHAR} 
	where id = #{id}					
</update>

<delete id="delete">
	delete from ticket where id = #{id}
</delete>

<update id="read">
	update ticket set readcnt = readcnt+1 where id = #{id}
</update>

<select id="detail" resultType="ticket.TicketDTO">
	select n.*, (select nickname from member m where m.nickname = writer) name 
	from ticket n where id = #{id}
</select>


<insert id="insert">
	insert into ticket(id, root, title, content, writer, filename, filepath)
	values ( seq_ticket.nextval, seq_ticket.currval, #{title}, #{content}, #{writer}
			, #{filename, jdbcType=VARCHAR}, #{filepath, jdbcType=VARCHAR} )
</insert>

<sql id='search_where'>
	<if test="search=='title' or search=='content'">
	where ${search} like '%'|| #{keyword} ||'%'
	</if>
	<if test="search=='writer'">
	where writer in ( select id from member where name like '%'|| #{keyword} ||'%' )
	</if>
	<if test="search=='all'">
	where title like '%'|| #{keyword} ||'%' 
	or content like '%'|| #{keyword} ||'%'
	or writer in ( select id from member where name like '%'|| #{keyword} ||'%' )
	</if>
</sql>

<select id="list" resultType="ticket.TicketPage">
	select n.*, (select name from member m where m.name = n.writer ) name  
	from (select n.*, rownum no 
			from (select * from ticket <include refid="search_where"/> 
				  order by root, step desc) n
			order by no desc) n
	where no between #{beginList} and #{endList}
</select>

<select id="log" resultType="ticket.TicketPage">
	select n.*, (select name from member m where m.nickname = n.writer ) name  
	from (select n.*, rownum no 
			from (select * from ticket <include refid="search_where"/> 
				  order by root, step desc) n
			order by no desc) n
	where no between #{beginList} and #{endList}
</select>

<select id="total_count" resultType="integer">
	select count(*) from ticket <include refid="search_where"/>
</select>

</mapper>